import asyncio
import sqlite3
from aiogram import types
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import logging

REQUIRED_CHANNEL = "@grifci"

async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        return False

API_TOKEN = '7692188396:AAFQcjzCqFHITJrNyPNOng9_RtfpysdWZlw'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    tokens INTEGER DEFAULT 0,
    last_check TIMESTAMP,
    referral_id INTEGER,
    ban_until TIMESTAMP,
    join_date TIMESTAMP,
    last_bonus TIMESTAMP
)''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    owner_id INTEGER,
    url TEXT,
    target INTEGER,
    current INTEGER DEFAULT 0,
    cost INTEGER,
    active INTEGER DEFAULT 1
)''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS actions (
    user_id INTEGER,
    channel_id INTEGER,
    timestamp TIMESTAMP,
    verified INTEGER DEFAULT 0
)''')
conn.commit()

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
def ensure_user_in_db(user_id: int):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, tokens, join_date) VALUES (?, ?, ?)",
                       (user_id, 0, datetime.now()))
        conn.commit()

class AddChannel(StatesGroup):
    url = State()
    target = State()
    cost = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∞ "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" ---
def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="earn")],
        [InlineKeyboardButton(text="üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="place")],
        [InlineKeyboardButton(text="üí∞ –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã", callback_data="balance")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="ref")],
        [InlineKeyboardButton(text="ü™ô –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="bonus")]
    ])

def back_to_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(F.text.startswith("/start"))
async def cmd_start(msg: Message, state: FSMContext):
    if not await is_subscribed(bot, msg.from_user.id):
        await msg.answer("üîí –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\nhttps://t.me/grifci")
        return

    user_id = msg.from_user.id
    ensure_user_in_db(user_id)

    ref_id = None
    if "?ref=" in msg.text:
        try:
            ref_id = int(msg.text.split("?ref=")[1])
        except:
            pass

    cursor.execute("SELECT referral_id FROM users WHERE user_id = ?", (user_id,))
    current_ref = cursor.fetchone()[0]
    if current_ref is None and ref_id is not None and ref_id != user_id:
        cursor.execute("UPDATE users SET referral_id = ? WHERE user_id = ?", (ref_id, user_id))
        cursor.execute("UPDATE users SET tokens = tokens + 3 WHERE user_id = ?", (ref_id,))
        try:
            await bot.send_message(ref_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username or user_id}!")
        except:
            pass
        conn.commit()
        await msg.answer(f"üëã –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {ref_id}!\n\nü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã, –ø–æ–¥–ø–∏—Å—ã–≤–∞—è—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏! üí•")
    else:
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã –∏ —Ä–∞–∑–º–µ—â–∞–π —Å–≤–æ–∏!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    await main_menu(msg)

async def main_menu(msg_or_cb):
    # msg_or_cb –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery
    kb = main_menu_kb()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if isinstance(msg_or_cb, Message):
        await msg_or_cb.answer(text, reply_markup=kb)
    elif isinstance(msg_or_cb, CallbackQuery):
        await msg_or_cb.message.edit_text(text, reply_markup=kb)
        await msg_or_cb.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)
@dp.callback_query(F.data == "menu")
async def back_to_menu(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    await main_menu(cb)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º ensure_user_in_db –∏ –∑–∞–º–µ–Ω—è–µ–º send -> edit_message_text —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ

@dp.callback_query(F.data == "balance")
async def balance(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (cb.from_user.id,))
    tokens = cursor.fetchone()[0]
    await cb.message.edit_text(f"üí∞ –£ —Ç–µ–±—è {tokens} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=back_to_menu_kb())
    await cb.answer()

@dp.callback_query(F.data == "place")
async def place_channel(cb: CallbackQuery, state: FSMContext):
    ensure_user_in_db(cb.from_user.id)
    await cb.message.edit_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=back_to_menu_kb())
    await state.set_state(AddChannel.url)
    await cb.answer()

@dp.message(AddChannel.url)
async def add_url(msg: Message, state: FSMContext):
    ensure_user_in_db(msg.from_user.id)
    url = msg.text
    if not url.startswith("https://t.me/"):
        await msg.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.")
        return

    username = url.split("https://t.me/")[-1]
    try:
        member = await bot.get_chat_member(chat_id=f"@{username}", user_id=msg.from_user.id)
    except:
        await msg.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return

    await state.update_data(url=url)
    await msg.answer("üë• –°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ?")
    await state.set_state(AddChannel.target)

@dp.message(AddChannel.target)
async def add_target(msg: Message, state: FSMContext):
    ensure_user_in_db(msg.from_user.id)
    await state.update_data(target=int(msg.text))
    await msg.answer("üí∞ –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å? (1 –ø–æ–¥–ø–∏—Å—á–∏–∫ = 1 —Ç–æ–∫–µ–Ω)")
    await state.set_state(AddChannel.cost)

@dp.message(AddChannel.cost)
async def add_cost(msg: Message, state: FSMContext):
    ensure_user_in_db(msg.from_user.id)
    data = await state.get_data()
    url = data["url"]
    target = data["target"]
    cost = int(msg.text)
    user_id = msg.from_user.id

    cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
    tokens = cursor.fetchone()[0]
    if tokens < cost:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    cursor.execute("INSERT INTO channels (owner_id, url, target, cost) VALUES (?, ?, ?, ?)",
                   (user_id, url, target, cost))
    cursor.execute("UPDATE users SET tokens = tokens - ? WHERE user_id = ?", (cost, user_id))
    conn.commit()

    await msg.answer("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å–∫–æ—Ä–æ.")
    await state.clear()

@dp.callback_query(F.data == "bonus")
async def daily_bonus(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    user_id = cb.from_user.id
    now = datetime.now()

    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if row is None:
        cursor.execute(
            "INSERT INTO users (user_id, tokens, last_bonus) VALUES (?, ?, ?)",
            (user_id, 1, now.isoformat())
        )
        conn.commit()
        await cb.message.edit_text("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª 1 —Ç–æ–∫–µ–Ω –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=back_to_menu_kb())
        await cb.answer()
        return

    if row[0] is not None:
        last_time = datetime.fromisoformat(row[0])
        if now - last_time < timedelta(hours=24):
            await cb.message.edit_text("‚ùå –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!", reply_markup=back_to_menu_kb())
            await cb.answer()
            return

    cursor.execute(
        "UPDATE users SET tokens = tokens + 1, last_bonus = ? WHERE user_id = ?", 
        (now.isoformat(), user_id)
    )
    conn.commit()
    await cb.message.edit_text("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª 1 —Ç–æ–∫–µ–Ω –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=back_to_menu_kb())
    await cb.answer()

@dp.callback_query(F.data == "ref")
async def send_ref(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref={cb.from_user.id}"
    await cb.message.edit_text(f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}", reply_markup=back_to_menu_kb())
    await cb.answer()

@dp.callback_query(F.data == "earn")
async def earn_tokens(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    user_id = cb.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ? AND ban_until IS NOT NULL AND ban_until > ?", (user_id, datetime.now()))
    if cursor.fetchone():
        await cb.message.edit_text("üö´ –í—ã –≤ –±–∞–Ω–µ –∑–∞ –æ—Ç–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_kb())
        await cb.answer()
        return

    cursor.execute('''
        SELECT * FROM channels
        WHERE active = 1 AND current < target
        ORDER BY id ASC
    ''')
    row = cursor.fetchone()
    if row is None:
        await cb.message.edit_text("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_kb())
        await cb.answer()
        return

    channel_id, owner_id, url, target, current, cost, active = row
    cursor.execute("SELECT * FROM actions WHERE user_id = ? AND channel_id = ?", (user_id, channel_id))
    if cursor.fetchone():
        await cb.message.edit_text("üîÑ –¢—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–¥–æ–∂–¥–∏ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.", reply_markup=back_to_menu_kb())
        await cb.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"verify_{channel_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text(f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {url}\n\n–ù–∞–∂–º–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è' –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ.", reply_markup=kb)
    await cb.answer()

@dp.callback_query(F.data.startswith("verify_"))
async def verify_subscription(cb: CallbackQuery):
    ensure_user_in_db(cb.from_user.id)
    user_id = cb.from_user.id
    channel_id = int(cb.data.split("_")[1])

    cursor.execute("SELECT url, owner_id FROM channels WHERE id = ?", (channel_id,))
    row = cursor.fetchone()
    if not row:
        await cb.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_menu_kb())
        await cb.answer()
        return
    url, owner_id = row
    username = url.split("https://t.me/")[-1]

    try:
        member = await bot.get_chat_member(chat_id=f"@{username}", user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            cursor.execute("INSERT INTO actions (user_id, channel_id, timestamp, verified) VALUES (?, ?, ?, 1)",
                           (user_id, channel_id, datetime.now()))
            cursor.execute("UPDATE users SET tokens = tokens + 1 WHERE user_id = ?", (user_id,))
            cursor.execute("UPDATE channels SET current = current + 1 WHERE id = ?", (channel_id,))
            conn.commit()
            await cb.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –¢–æ–∫–µ–Ω –Ω–∞—á–∏—Å–ª–µ–Ω!", reply_markup=back_to_menu_kb())

            try:
                await bot.send_message(owner_id, f"üîî –ù–∞ –≤–∞—à –∫–∞–Ω–∞–ª {url} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{cb.from_user.username or user_id}")
            except:
                pass
        else:
            await cb.message.edit_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏.", reply_markup=back_to_menu_kb())
    except:
        await cb.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_kb())
    await cb.answer()

async def check_unsubscribes():
    while True:
        now = datetime.now()
        cutoff = now - timedelta(hours=48)
        cursor.execute("SELECT * FROM actions WHERE verified = 1 AND timestamp < ?", (cutoff,))
        actions = cursor.fetchall()
        for user_id, channel_id, timestamp, verified in actions:
            cursor.execute("SELECT url FROM channels WHERE id = ?", (channel_id,))
            row = cursor.fetchone()
            if not row:
                continue
            username = row[0].split("https://t.me/")[-1]
            try:
                member = await bot.get_chat_member(chat_id=f"@{username}", user_id=user_id)
                if member.status == "left":
                    cursor.execute("UPDATE users SET tokens = tokens - 2, ban_until = ? WHERE user_id = ?", (now + timedelta(hours=24), user_id))
                    conn.commit()
            except:
                continue
        await asyncio.sleep(3600)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(check_unsubscribes())
    loop.run_until_complete(dp.start_polling(bot))
