import asyncio
import sqlite3
from aiogram import types, Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
import logging

API_TOKEN = '7692188396:AAFQcjzCqFHITJrNyPNOng9_RtfpysdWZlw'
REQUIRED_CHANNEL = "@grifci"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    tokens INTEGER DEFAULT 0,
    last_check TIMESTAMP,
    referral_id INTEGER,
    ban_until TIMESTAMP,
    join_date TIMESTAMP,
    last_bonus TIMESTAMP
)''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    owner_id INTEGER,
    url TEXT,
    target INTEGER,
    current INTEGER DEFAULT 0,
    cost INTEGER,
    active INTEGER DEFAULT 1
)''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS actions (
    user_id INTEGER,
    channel_id INTEGER,
    timestamp TIMESTAMP,
    verified INTEGER DEFAULT 0
)''')
conn.commit()


# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
class AddChannel(StatesGroup):
    url = State()
    target = State()
    cost = State()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª ---
async def is_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status != ChatMemberStatus.LEFT
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False



# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É ---
async def ensure_user_in_db(user_id: int, referral_id: int = None):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, tokens, join_date, referral_id) VALUES (?, ?, ?, ?)",
            (user_id, 0, datetime.now().isoformat(), referral_id)
        )
        conn.commit()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) ---
async def main_menu(target):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data="earn")],
        [InlineKeyboardButton(text="üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="place")],
        [InlineKeyboardButton(text="üí∞ –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã", callback_data="balance")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="ref")],
        [InlineKeyboardButton(text="ü™ô –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if isinstance(target, Message):
        await target.answer(text, reply_markup=kb)
    elif isinstance(target, CallbackQuery):
        try:
            await target.message.edit_text(text, reply_markup=kb)
        except Exception:
            await target.message.answer(text, reply_markup=kb)


# --- /start —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@dp.message(F.text.startswith("/start"))
async def cmd_start(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    subscribed = await is_subscribed(bot, user_id)

    if subscribed:
        await ensure_user_in_db(user_id)
        await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
        await main_menu(msg)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscribe")]
        ])
        await msg.answer(
            f"üîí –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\nhttps://t.me/{REQUIRED_CHANNEL.lstrip('@')}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb
        )


@dp.callback_query(F.data == "check_subscribe")
async def check_subscription(cb: CallbackQuery):
    user_id = cb.from_user.id
    subscribed = await is_subscribed(bot, user_id)
    if subscribed:
        await ensure_user_in_db(user_id)
        await cb.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await main_menu(cb)
    else:
        await cb.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", show_alert=True)


# --- –ö–æ–º–∞–Ω–¥–∞ /help –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å" ---
HELP_TEXT = """
üìå **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –≤ –±–æ—Ç–∞ –≤–∑–∞–∏–º–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫**

1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞: https://t.me/grifci

2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.

4. –í –±–æ—Ç–µ –≤—ã–±–µ—Ä–∏—Ç–µ "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ —Ç–æ–∫–µ–Ω—ã.

5. –î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:
- –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ.
- –ù–µ —É–¥–∞–ª—è–π—Ç–µ –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
- –ó–∞ –æ—Ç–ø–∏—Å–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —à—Ç—Ä–∞—Ñ—ã —Ç–æ–∫–µ–Ω–∞–º–∏.
"""

@dp.message(F.text == "/help")
async def cmd_help(msg: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await msg.answer(HELP_TEXT, reply_markup=kb)

@dp.callback_query(F.data == "help")
async def help_callback(cb: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text(HELP_TEXT, reply_markup=kb)


# --- –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ---
@dp.callback_query(F.data == "menu")
async def back_to_menu(cb: CallbackQuery):
    await main_menu(cb)


# --- –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ ---
@dp.callback_query(F.data == "balance")
async def balance(cb: CallbackQuery):
    user_id = cb.from_user.id
    cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    tokens = row[0] if row else 0
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text(f"üí∞ –£ —Ç–µ–±—è {tokens} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=kb)
    await cb.answer()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ---
@dp.callback_query(F.data == "place")
async def place_channel(cb: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
    await state.set_state(AddChannel.url)
    await cb.answer()

@dp.message(AddChannel.url)
async def add_url(msg: Message, state: FSMContext):
    url = msg.text
    if not url.startswith("https://t.me/"):
        await msg.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.")
        return

    username = url.split("https://t.me/")[-1]
    try:
        member = await bot.get_chat_member(chat_id=f"@{username}", user_id=msg.from_user.id)
    except Exception:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
        ])
        await msg.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=kb)
        return

    await state.update_data(url=url)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await msg.answer("üë• –°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ?", reply_markup=kb)
    await state.set_state(AddChannel.target)

@dp.message(AddChannel.target)
async def add_target(msg: Message, state: FSMContext):
    try:
        target = int(msg.text)
        if target <= 0:
            raise ValueError
    except:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    await state.update_data(target=target)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await msg.answer("üí∞ –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å? (1 –ø–æ–¥–ø–∏—Å—á–∏–∫ = 1 —Ç–æ–∫–µ–Ω)", reply_markup=kb)
    await state.set_state(AddChannel.cost)

@dp.message(AddChannel.cost)
async def add_cost(msg: Message, state: FSMContext):
    try:
        cost = int(msg.text)
        if cost <= 0:
            raise ValueError
    except:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    data = await state.get_data()
    url = data.get("url")
    target = data.get("target")
    user_id = msg.from_user.id

    cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    tokens = row[0] if row else 0
    if tokens < cost:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
        ])
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=kb)
        return


    data = await state.get_data()
    url = data.get("url")
    target = data.get("target")
    user_id = msg.from_user.id

    cursor.execute("SELECT tokens FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    tokens = row[0] if row else 0
    if tokens < cost:
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
        return

    cursor.execute("INSERT INTO channels (owner_id, url, target, cost) VALUES (?, ?, ?, ?)",
                   (user_id, url, target, cost))
    cursor.execute("UPDATE users SET tokens = tokens - ? WHERE user_id = ?", (cost, user_id))
    conn.commit()

    await msg.answer("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å–∫–æ—Ä–æ.")
    await state.clear()


# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ---
@dp.callback_query(F.data == "bonus")
async def daily_bonus(cb: CallbackQuery):
    user_id = cb.from_user.id
    now = datetime.now()

    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if row is None or row[0] is None:
        cursor.execute(
            "UPDATE users SET tokens = tokens + 1, last_bonus = ? WHERE user_id = ?",
            (now.isoformat(), user_id)
        )
        if cursor.rowcount == 0:
            cursor.execute(
                "INSERT INTO users (user_id, tokens, last_bonus) VALUES (?, ?, ?)",
                (user_id, 1, now.isoformat())
            )
        conn.commit()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
        ])
        await cb.message.edit_text("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª 1 —Ç–æ–∫–µ–Ω –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=kb)
        await cb.answer()
        return

    last_time = datetime.fromisoformat(row[0])
    if now - last_time < timedelta(hours=24):
        await cb.answer("‚ùå –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!", show_alert=True)
        return

    cursor.execute(
        "UPDATE users SET tokens = tokens + 1, last_bonus = ? WHERE user_id = ?",
        (now.isoformat(), user_id)
    )
    conn.commit()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text("üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª 1 —Ç–æ–∫–µ–Ω –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=kb)
    await cb.answer()


# --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ---
@dp.callback_query(F.data == "ref")
async def send_ref(cb: CallbackQuery):
    me = await bot.get_me()
    ref_link = f"https://t.me/{me.username}?start=ref={cb.from_user.id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text(f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}", reply_markup=kb)
    await cb.answer()


# --- –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã (–≤–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏) ---
@dp.callback_query(F.data == "earn")
async def earn_tokens(cb: CallbackQuery):
    user_id = cb.from_user.id
    cursor.execute("SELECT ban_until FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0] is not None:
        ban_until = datetime.fromisoformat(row[0])
        if ban_until > datetime.now():
            await cb.answer("üö´ –í—ã –≤ –±–∞–Ω–µ –∑–∞ –æ—Ç–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

    cursor.execute('''
        SELECT * FROM channels
        WHERE active = 1 AND current < target
        ORDER BY id ASC
    ''')
    row = cursor.fetchone()
    if row is None:
        await cb.answer("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    channel_id, owner_id, url, target, current, cost, active = row
    cursor.execute("SELECT * FROM actions WHERE user_id = ? AND channel_id = ?", (user_id, channel_id))
    if cursor.fetchone():
        await cb.answer("üîÑ –¢—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–¥–æ–∂–¥–∏ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"verify_{channel_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])
    await cb.message.edit_text(f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {url}\n\n–ù–∞–∂–º–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è' –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ.", reply_markup=kb)
    await cb.answer()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@dp.callback_query(F.data.startswith("verify_"))
async def verify_subscription(cb: CallbackQuery):
    user_id = cb.from_user.id
    channel_id = int(cb.data.split("_")[1])

    cursor.execute("SELECT url, owner_id FROM channels WHERE id = ?", (channel_id,))
    row = cursor.fetchone()
    if not row:
        await cb.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    url, owner_id = row
    username = url.split("https://t.me/")[-1]

    try:
        member = await bot.get_chat_member(chat_id=f"@{username}", user_id=user_id)
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            cursor.execute("INSERT INTO actions (user_id, channel_id, timestamp, verified) VALUES (?, ?, ?, 1)",
                           (user_id, channel_id, datetime.now()))
            cursor.execute("UPDATE users SET tokens = tokens + 1 WHERE user_id = ?", (user_id,))
            cursor.execute("UPDATE channels SET current = current + 1 WHERE id = ?", (channel_id,))
            conn.commit()
            await cb.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –¢–æ–∫–µ–Ω –Ω–∞—á–∏—Å–ª–µ–Ω!", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]]
            ))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
            try:
                await bot.send_message(owner_id, f"üîî –ù–∞ –≤–∞—à –∫–∞–Ω–∞–ª {url} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{cb.from_user.username or user_id}")
            except:
                pass
        else:
            await cb.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.", show_alert=True)
    except:
        await cb.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø–∏—Å–æ–∫ ---
async def check_unsubscribes():
    while True:
        now = datetime.now()
        cutoff = now - timedelta(hours=48)
        cursor.execute("SELECT user_id, channel_id, timestamp, verified FROM actions WHERE verified = 1 AND timestamp < ?", (cutoff.isoformat(),))
        actions = cursor.fetchall()
        for user_id, channel_id, timestamp, verified in actions:
            cursor.execute("SELECT url FROM channels WHERE id = ?", (channel_id,))
            row = cursor.fetchone()
            if not row:
                continue
            username = row[0].split("https://t.me/")[-1]
            try:
                member = await bot.get_chat_member(chat_id=f"@{username}", user_id=user_id)
                if member.status == "left":
                    # –®—Ç—Ä–∞—Ñ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –±–∞–Ω
                    cursor.execute("UPDATE users SET tokens = tokens - 2, ban_until = ? WHERE user_id = ?", ( (now + timedelta(hours=24)).isoformat(), user_id))
                    conn.commit()
            except:
                continue
        await asyncio.sleep(3600)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()
    loop.create_task(check_unsubscribes())
    loop.run_until_complete(dp.start_polling(bot))
